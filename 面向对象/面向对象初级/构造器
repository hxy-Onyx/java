1. 构造器的特点
构造器名称必须与类名相同。
构造器没有返回类型，即使是 void 也不写。
构造器可以带有参数，用于初始化对象时传递值。
如果没有定义构造器，Java 会提供一个默认的无参构造器
。
2. 构造器的类型
构造器主要有两种类型：默认构造器 和 有参构造器。

2.1. 默认构造器
如果在类中没有显式定义任何构造器，Java 会提供一个默认的无参构造器。这个构造器没有参数，且不会对属性做任何初始化（除了默认值）。

举例：
class Person {
    String name;
    int age;

    // 默认构造器（隐式）
    // Java 会自动提供一个无参构造器
}

public class Main {
    public static void main(String[] args) {
        // 使用默认构造器创建对象
        Person person = new Person();
        System.out.println("Name: " + person.name); // 输出 null
        System.out.println("Age: " + person.age);   // 输出 0
    }
}

2.2. 有参构造器
有参构造器允许在创建对象时传递参数，用于初始化对象的属性。


class Person {
    String name;
    int age;

    // 有参构造器
    Person(String name, int age) {
        this.name = name;  // 使用 this 关键字区分成员变量与参数
        this.age = age;
    }
}

public class Main {
    public static void main(String[] args) {
        // 使用有参构造器创建对象
        Person person = new Person("John", 25);
        System.out.println("Name: " + person.name); // 输出 John
        System.out.println("Age: " + person.age);   // 输出 25
    }
}

2.3. 无参构造器
无参构造器（无参数的构造器）允许创建对象时不传递任何参数，通常用于初始化默认值。
如果类中定义了有参构造器，Java 不再提供默认的无参构造器，如果还想使用无参构造器，必须显式定义一个。


class Person {
    String name;
    int age;

    // 无参构造器
    Person() {
        this.name = "Unknown";
        this.age = 0;
    }

    // 有参构造器
    Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

public class Main {
    public static void main(String[] args) {
        // 使用无参构造器
        Person person1 = new Person();
        System.out.println("Name: " + person1.name); // 输出 Unknown
        System.out.println("Age: " + person1.age);   // 输出 0

        // 使用有参构造器
        Person person2 = new Person("John", 25);
        System.out.println("Name: " + person2.name); // 输出 John
        System.out.println("Age: " + person2.age);   // 输出 25
    }
}

3. 构造器的重载
构造器重载是指一个类中可以有多个构造器，前提是这些构造器的参数数量或类型不同。通过构造器重载，类可以根据不同的参数进行不同的初始化。

class Person {
    String name;
    int age;

    // 无参构造器
    Person() {
        this.name = "Unknown";
        this.age = 0;
    }

    // 有参构造器
    Person(String name) {
        this.name = name;
        this.age = 18;  // 默认年龄
    }

    // 有参构造器
    Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

public class Main {
    public static void main(String[] args) {
        // 使用不同的构造器
        Person person1 = new Person();
        Person person2 = new Person("Alice");
        Person person3 = new Person("Bob", 30);

        System.out.println("Person1: " + person1.name + ", Age: " + person1.age); // 输出 Unknown, Age: 0
        System.out.println("Person2: " + person2.name + ", Age: " + person2.age); // 输出 Alice, Age: 18
        System.out.println("Person3: " + person3.name + ", Age: " + person3.age); // 输出 Bob, Age: 30
    }
}
在上述例子中，Person 类定义了三个不同的构造器，每个构造器根据传入的参数不同，初始化的方式也不同。

